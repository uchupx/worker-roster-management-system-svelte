
openapi: "3.0.0"
generate:
  echo-server: true
  models: true
output: gen.go
info:
  version: 1.0.0
  title: User Service
  license:
    name: MIT
servers:
  - url: http://localhost
paths:
  /login:
    post:
      summary: placeholder
      requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginRequest"

      responses:
        "200":
          description: Token Created, success login 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


  /register:
    post:
      summary: placeholder
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User successfully created 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResponse"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users:
    post:
      summary: placeholder
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User successfully created 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatedResponse"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    get:
      summary: list user include their role 
      parameters:
        - name: role 
          in: query
          description: filter by role 
          required: false 
          schema:
            type: integer 
      responses:
        "200":
          description: Successful response with an array of users 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserSchema"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"

  /me:
    get:
      summary: get self user data
      responses:
        "200":
          description: Successful response with an array of users 
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSchema"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
  /shifts/months:
    get:
      summary: list shifts all empoyee per month
      parameters:
        - name: dateStart
          in: query
          description: Start date for the range (Unix format)
          required: true
          schema:
            type: integer 
        - name: dateEnd
          in: query
          description: End date for the range (Unix  format)
          required: true
          schema:
            type: integer 
      responses:
        "200":
          description: Successful response with an array of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShiftSchema"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"

  /shifts:
    get:
      summary: list shifts all empoyee
      parameters:
        - name: status 
          in: query
          description: status shifts 0 => pending, 1 => approved. 2 => rejected, 3 => signup, 4 => done 
          schema:
            type: integer 
        - name: user_id 
          in: query
          description: filter by user 
          schema:
            type: integer
        - name: id 
          in: query
          description: filder by shift id 
          schema:
            type: integer
      responses:
        "200":
          description: Successful response with an array of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShiftSchema"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
    post:
      summary: create shift employee only admin 
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/ShiftRequest"
      responses:
        "201":
          description: Shift is reqested 
          content:
            application/json:
              schema:
                type: object 
                items:
                  $ref: "#/components/schemas/ShiftSchema"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"



  /shifts/{id}/approve:
    post:
      summary: approve shift 
      parameters:
        - name: id 
          in: path
          required: true
          description: The ID of the shift 
          schema:
            type: string
      responses:
        "200":
          description: Successful response when shift approved 
          content:
            application/json:
              schema:
                type: object 
                items:
                  $ref: "#/components/schemas/OkResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"

  /shifts/{id}/reject:
    post:
      summary: approve shift 
      parameters:
        - name: id 
          in: path
          required: true
          description: The ID of the shift 
          schema:
            type: string
      responses:
        "200":
          description: Successful response when shift approved 
          content:
            application/json:
              schema:
                type: object 
                items:
                  $ref: "#/components/schemas/OkResponse"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"


  /me/shifts:
    get:
      summary: placeholder
      responses:
        "200":
          description: Successful response with an array of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShiftSchema"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
    post:
      summary: endpoint for employee request shift
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: "#/components/schemas/ShiftRequest"
      responses:
        "201":
          description: Shift is reqested 
          content:
            application/json:
              schema:
                type: object 
                items:
                  $ref: "#/components/schemas/ShiftSchema"
        "401":
          $ref: "#/components/responses/ErrorResponse"
        "404":
          $ref: "#/components/responses/ErrorResponse"
        "500":
          $ref: "#/components/responses/ErrorResponse"
        


components:
  responses:
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: admin@uchupx.tech
        password:
          type: string
          example: 123456 
    LoginResponse:
      type: object
      required:
        - token
        - duration
      properties:
        token:
          type: string
          example: eyAUScOASCokanscoIAHSVOMciajscmh
        duration:
          type: integer 
          example: 3600

    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
        - role_id
      properties:
        name:
          type: string
          example: Yusuf Andriyanto 
        email:
          type: string
          example: hi@uchupx.tech
        password:
          type: string
          example: this_is_a_password
        role_id:
          type: integer 
          example: 1
          description: admin = 1, employee = 2
    
    ShiftRequest:
      type: object
      properties:
        user_id:
          type: integer
          example: 42
        start_time:
          type: string
          format: time
          example: "09:00:00"
        end_time:
          type: string
          format: time
          example: "17:00:00"
        shift_date:
          type: string
          format: date-time
          example: "2023-10-01"
      required:
        - start_time
        - end_time
        - shift_date

    ShiftSchema:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 42
        user_name:
          type: string 
          example: John 
        start_time:
          type: string
          format: time
          example: "09:00:00"
        end_time:
          type: string
          format: time
          example: "17:00:00"
        shift_date:
          type: string
          format: date-time
          example: "2023-10-01"
        status:
          type: integer 
          example: 1 
          description: "0 is pending, 1 is approved, 2 is rejected"
        created_at:
          type: string
          format: date-time
          example: "2023-10-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          nullable: true
          example: "2023-10-02T12:00:00Z"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          example: null
      required:
        - id
        - user_id
        - start_time
        - end_time
        - shift_date
        - created_at

    RoleSchema:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Admin 

    UserSchema:
      type: object
      required:
        - id
        - name
        - email
        - roles
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Yusuf Andriyanto
        email:
          type: string
          example: hi@uchupx.tech
        roles:
          type: array 
          items:
            $ref: '#/components/schemas/RoleSchema'
          description: List of roles with id and name

    ErrorResponse:
        type: object
        required:
          - message
        properties:
          message:
            type: string

    CreatedResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: aaaaaa-bbbbbb-cccccc-dddddd

    OkResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: aaaaaa-bbbbbb-cccccc-dddddd


          
